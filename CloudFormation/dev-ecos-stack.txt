{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Template to create core ECOS resources.",
  "Parameters": {
    "ApiECSClusterName": {
      "Type": "String",
      "Description": "Specifies the ECS Cluster Name with which the resources would be associated",
      "Default": "ecos-api-ecs-cluster"
    },
    "WebECSClusterName": {
      "Type": "String",
      "Description": "Specifies the ECS Cluster Name with which the resources would be associated",
      "Default": "ecos-web-ecs-cluster"
    }
  },
  "Resources": {
    "ECSVPC": {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : "172.31.0.0/16",
        "InstanceTenancy" : "default"
      }
    },
    "SubnetA": {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone" : "us-east-1a",
        "CidrBlock" : "172.31.80.0/20",
        "EnableDns64" : false,
        "Ipv6Native" : false,
        "MapPublicIpOnLaunch" : true,
        "PrivateDnsNameOptionsOnLaunch" : {
          "HostnameType": "ip-name",
          "EnableResourceNameDnsARecord": false,
          "EnableResourceNameDnsAAAARecord": false
        },
        "VpcId" : {
          "Ref": "ECSVPC"
        }
      }
	},
    "SubnetB": {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone" : "us-east-1b",
        "CidrBlock" : "172.31.16.0/20",
        "EnableDns64" : false,
        "Ipv6Native" : false,
        "MapPublicIpOnLaunch" : true,
        "PrivateDnsNameOptionsOnLaunch" : {
          "HostnameType": "ip-name",
          "EnableResourceNameDnsARecord": false,
          "EnableResourceNameDnsAAAARecord": false
        },
        "VpcId" : {
          "Ref": "ECSVPC"
        }
      }
	},
    "SubnetC": {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone" : "us-east-1c",
        "CidrBlock" : "172.31.32.0/20",
        "EnableDns64" : false,
        "Ipv6Native" : false,
        "MapPublicIpOnLaunch" : true,
        "PrivateDnsNameOptionsOnLaunch" : {
          "HostnameType": "ip-name",
          "EnableResourceNameDnsARecord": false,
          "EnableResourceNameDnsAAAARecord": false
        },
        "VpcId" : {
          "Ref": "ECSVPC"
        }
      }
	},
    "SubnetD": {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone" : "us-east-1d",
        "CidrBlock" : "172.31.0.0/20",
        "EnableDns64" : false,
        "Ipv6Native" : false,
        "MapPublicIpOnLaunch" : true,
        "PrivateDnsNameOptionsOnLaunch" : {
          "HostnameType": "ip-name",
          "EnableResourceNameDnsARecord": false,
          "EnableResourceNameDnsAAAARecord": false
        },
        "VpcId" : {
          "Ref": "ECSVPC"
        }
      }
	},
    "SubnetE": {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone" : "us-east-1e",
        "CidrBlock" : "172.31.48.0/20",
        "EnableDns64" : false,
        "Ipv6Native" : false,
        "MapPublicIpOnLaunch" : true,
        "PrivateDnsNameOptionsOnLaunch" : {
          "HostnameType": "ip-name",
          "EnableResourceNameDnsARecord": false,
          "EnableResourceNameDnsAAAARecord": false
        },
        "VpcId" : {
          "Ref": "ECSVPC"
        }
      }
	},
	"SubnetF": {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone" : "us-east-1f",
        "CidrBlock" : "172.31.64.0/20",
        "EnableDns64" : false,
        "Ipv6Native" : false,
        "MapPublicIpOnLaunch" : true,
        "PrivateDnsNameOptionsOnLaunch" : {
          "HostnameType": "ip-name",
          "EnableResourceNameDnsARecord": false,
          "EnableResourceNameDnsAAAARecord": false
        },
        "VpcId" : {
          "Ref": "ECSVPC"
        }
      }
	},
    "ApiECSCluster": {
      "Type": "AWS::ECS::Cluster",
      "Properties": {
        "ClusterName": {
          "Ref": "ApiECSClusterName"
        },  
        "CapacityProviders": [
          "FARGATE",
          "FARGATE_SPOT"
        ],
        "ClusterSettings": [
          {
            "Name": "containerInsights",
            "Value": "disabled"
          }
        ],
        "Configuration": {
          "ExecuteCommandConfiguration": {
            "Logging": "DEFAULT"
          }
        },
        "ServiceConnectDefaults": {
          "Namespace": { "Ref": "ApiECSClusterName" }
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Ref": "ApiECSClusterName" }
          }
        ]
      }
    },
    "WebECSCluster": {
      "Type": "AWS::ECS::Cluster",
      "Properties": {
        "ClusterName": {
          "Ref": "WebECSClusterName"
        },
        "CapacityProviders": [
          "FARGATE",
          "FARGATE_SPOT"
        ],
        "ClusterSettings": [
          {
            "Name": "containerInsights",
            "Value": "disabled"
          }
        ],
        "Configuration": {                                                          "ExecuteCommandConfiguration": {
            "Logging": "DEFAULT"
          }
        },
        "ServiceConnectDefaults": {
          "Namespace": { "Ref": "WebECSClusterName" }
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Ref": "WebECSClusterName" }
          }
        ]
      }
    },
    "ApiTaskDefinition": {
      "Type" : "AWS::ECS::TaskDefinition",
      "Properties" : {
        "ContainerDefinitions": [
        {
          "Name": "ecos-api-cont",
          "Image": "058264367679.dkr.ecr.us-east-1.amazonaws.com/ecos-api-repo:latest",
          "Cpu": 0,
          "PortMappings": [
            {
              "Name": "ecos-api-cont-4321-tcp",
              "ContainerPort": 4321,
              "HostPort": 4321,
              "Protocol": "tcp"
            }
          ],
          "Essential": true,
          "Environment": [
            {
              "Name": "VERSION",
              "Value": "v1"
            },
            {
              "Name": "ENVIRONMENT",
              "Value": "dev"
            }
          ],
          "MountPoints": [],
          "VolumesFrom": [],
          "WorkingDirectory": "/app",
          "LogConfiguration": {
            "LogDriver": "awslogs",
            "Options": {
              "awslogs-group": "/ecs/ecos-api",
              "awslogs-region": "us-east-1",
              "awslogs-stream-prefix": "ecos-api"
            }
          }
        }
        ],
        "Cpu" : 4096,
        "ExecutionRoleArn" : "arn:aws:iam::058264367679:role/ecos-ecs-task-execution-role",
        "Family" : "ecos-api-td",
        "Memory" : 8192,
        "NetworkMode" : "awsvpc",
        "RequiresCompatibilities" : [ "FARGATE" ],
        "TaskRoleArn" : "arn:aws:iam::058264367679:role/ecos-ecs-task-role"
      }
    },
    "WebTaskDefinition": {
      "Type" : "AWS::ECS::TaskDefinition",
      "Properties" : {
        "ContainerDefinitions" : [
        {
          "Name": "ecos-web-cont",
          "Image": "058264367679.dkr.ecr.us-east-1.amazonaws.com/ecos-web-repo:latest",
          "Cpu": 0,
          "PortMappings": [
          {
            "Name": "ecos-web-cont-4321-tcp",
            "ContainerPort": 4321,
            "HostPort": 4321,
            "Protocol": "tcp"
          }
          ],
          "Essential": true,
          "Environment": [
            {
              "Name": "VERSION",
              "Value": "v1"
            },
            {
              "Name": "MARKETPLACE_API_KEY ",
              "Value": "FIXME:We need somewhere more secure than Git to store this"
            },
            {
              "Name": "MARKETPLACE_BASE_URL",
              "Value": "https://marketplace.api.healthcare.gov/api/v1"
            },
            {
              "Name": "ENVIRONMENT",
              "Value": "dev"
            }
          ],
          "MountPoints": [],
          "VolumesFrom": [],
          "WorkingDirectory": "/app",
          "LogConfiguration": {
            "LogDriver": "awslogs",
            "Options": {
              "awslogs-group": "/ecs/ecos-web",
              "awslogs-region": "us-east-1",
              "awslogs-stream-prefix": "ecos-web"
            }
          }
        }
        ],
        "Cpu" : 4096,
        "ExecutionRoleArn" : "arn:aws:iam::058264367679:role/ecos-ecs-task-execution-role",
        "Family" : "ecos-web-td",
        "Memory" : 8192,
        "NetworkMode" : "awsvpc",
        "RequiresCompatibilities" : [ "FARGATE" ],
        "TaskRoleArn" : "arn:aws:iam::058264367679:role/ecos-ecs-task-role"
      }
    },
    "ApiSecurityGroup": {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "ecos-api-alb-sg",
        "GroupName" : "ecos-api-alb-sg",
        "SecurityGroupEgress" : [
          {
            "CidrIp" : "0.0.0.0/0",
            "IpProtocol" : "-1"
          }
        ],
        "SecurityGroupIngress" : [
          {
            "CidrIp" : "0.0.0.0/0",
            "IpProtocol" : "-1"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "ecos-api-alb-sg"
          },
          {
            "Key": "Environment",
            "Value": "dev"
          }
        ],
        "VpcId" :  {
          "Ref": "ECSVPC"
        }
      }
    },
    "WebSecurityGroup": {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "ecos-web-alb-sg",
        "GroupName" : "ecos-web-alb-sg",
        "SecurityGroupEgress" : [
          {
            "CidrIp" : "0.0.0.0/0",
            "IpProtocol" : "-1"
          }
        ],
        "SecurityGroupIngress" : [
          {
            "CidrIp" : "0.0.0.0/0",
            "FromPort" : 0,
            "IpProtocol" : "tcp",
            "ToPort" : 0
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "ecos-web-alb-sg"
          },
          {
            "Key": "Environment",
            "Value": "dev"
          }
        ],
        "VpcId" :  {
          "Ref": "ECSVPC"
        }
      }
    },
    "DefaultSecurityGroup": {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "default VPC security group",
        "GroupName" : "default",
        "SecurityGroupEgress": [
          {
            "CidrIp" : "0.0.0.0/0",
            "IpProtocol" : "-1"
          }
        ],
        "SecurityGroupIngress" : [
          {
            "IpProtocol" : "-1"
          }
        ],
        "VpcId" :  {
          "Ref": "ECSVPC"
        }
      }
    },
    "ECSApiTargetGroup": {
      "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties" : {
        "Protocol" : "HTTP",
        "Port" : 80,
        "VpcId" :  {
          "Ref": "ECSVPC"
         },
        "HealthCheckEnabled" : true,
        "HealthCheckIntervalSeconds" : 120,
        "HealthCheckPath" : "/",
        "HealthCheckPort" : "traffic-port",
        "HealthCheckProtocol" : "HTTP",
        "HealthCheckTimeoutSeconds" : 60,
        "HealthyThresholdCount" : 2,
        "IpAddressType" : "ipv4",
        "Matcher" : {
          "HttpCode": "200"
        },
        "ProtocolVersion" : "HTTP1",
        "TargetType" : "ip",
        "UnhealthyThresholdCount" : 2
      }
    },
    "ECSWebTargetGroup": {
      "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties" : {
        "Protocol" : "HTTP",
        "Port" : 80,
        "VpcId" :  {
          "Ref": "ECSVPC"
        },
        "HealthCheckEnabled" : true,
        "HealthCheckIntervalSeconds" : 120,
        "HealthCheckPath" : "/",
        "HealthCheckPort" : "traffic-port",
        "HealthCheckProtocol" : "HTTP",
        "HealthCheckTimeoutSeconds" : 60,
        "HealthyThresholdCount" : 2,
        "IpAddressType" : "ipv4",
        "Matcher" : {
          "HttpCode": "200"
        },
        "ProtocolVersion" : "HTTP1",
        "TargetType" : "ip",
        "UnhealthyThresholdCount" : 2
      }
    },
    "ECSApiLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "IpAddressType" : "ipv4",
        "Name" : "ecos-api-alb",
        "Scheme" : "internal",
        "SecurityGroups" : [
          {
            "Ref": "ApiSecurityGroup"
          }
        ],
        "Subnets" :  [
          { "Ref": "SubnetA" },
          { "Ref": "SubnetD" }
        ],
        "Type" : "application"
      }
    },
    "ECSWebLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "IpAddressType" : "ipv4",
        "Name" : "ecos-web-alb",
        "Scheme" : "internal",
        "SecurityGroups" : [
          {
            "Ref": "WebSecurityGroup"
          }
        ],
        "Subnets" :  [
          { "Ref": "SubnetA" },
          { "Ref": "SubnetD" }
        ],
        "Type" : "application"
      }
    },
	"ECSApiListener": {
      "Type" : "AWS::ElasticLoadBalancingV2::Listener",
      "Properties" : {
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": { "Ref": "ECSApiTargetGroup" },
            "ForwardConfig": {
              "TargetGroups": [
                {
                  "TargetGroupArn": { "Ref": "ECSApiTargetGroup" },
                  "Weight": 1
                }
              ],
              "TargetGroupStickinessConfig": {
                "Enabled": false
              }
            }
          }
        ],
        "LoadBalancerArn" : { "Ref": "ECSApiLoadBalancer" },
        "Port" : 80,
        "Protocol" : "HTTP"
      }
    },
	"ECSWebListener": {
      "Type" : "AWS::ElasticLoadBalancingV2::Listener",
      "Properties" : {
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": { "Ref": "ECSWebTargetGroup" },
            "ForwardConfig": {
              "TargetGroups": [
                {
                  "TargetGroupArn": { "Ref": "ECSWebTargetGroup" },
                  "Weight": 1
                }
              ],
              "TargetGroupStickinessConfig": {
                "Enabled": false
              }
            }
          }
        ],
        "LoadBalancerArn" : { "Ref": "ECSWebLoadBalancer" },
        "Port" : 80,
        "Protocol" : "HTTP"
      }
    },
	"ApiECSService": {
      "Type": "AWS::ECS::Service",
	  "DependsOn": "ECSApiListener",
      "Properties": {
        "Cluster": { "Ref": "ApiECSClusterName" },
        "LoadBalancers": [
          {
            "TargetGroupArn": { "Ref": "ECSApiTargetGroup" },
            "ContainerName": "ecos-api-cont",
            "ContainerPort": 4321
          }
        ],
        "CapacityProviderStrategy": [
          {
            "CapacityProvider": "FARGATE",
            "Base": 0,
            "Weight": 1
          }
        ],
        "TaskDefinition": { "Ref": "ApiTaskDefinition" },
        "ServiceName": "ecos-api-service",
        "SchedulingStrategy": "REPLICA",
        "DesiredCount": 1,
        "NetworkConfiguration": {
          "AwsvpcConfiguration": {
            "AssignPublicIp": "ENABLED",
            "SecurityGroups": [
              { "Ref": "DefaultSecurityGroup" }
            ],
            "Subnets": [
			  { "Ref": "SubnetA" },
              { "Ref": "SubnetB" },
              { "Ref": "SubnetC" },
              { "Ref": "SubnetD" },
              { "Ref": "SubnetE" },
              { "Ref": "SubnetF" }
            ]
          }
        },
        "PlatformVersion": "LATEST",
        "DeploymentConfiguration": {
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 100,
          "DeploymentCircuitBreaker": {
            "Enable": true,
            "Rollback": true
          }
        },
        "DeploymentController": {
          "Type": "ECS"
        },
        "ServiceConnectConfiguration": {
          "Enabled": false
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "ecos-api-service"
          },
          {
            "Key": "Environment",
            "Value": "dev"
          }
        ],
        "EnableECSManagedTags": true
      }
    },
    "WebECSService": {
      "Type": "AWS::ECS::Service",
	  "DependsOn": "ECSWebListener",
      "Properties": {
        "Cluster": { "Ref": "WebECSClusterName" },
        "LoadBalancers": [
          {
            "TargetGroupArn": { "Ref": "ECSWebTargetGroup" },
            "ContainerName": "ecos-web-cont",
            "ContainerPort": 4321
          }
        ],
        "CapacityProviderStrategy": [
          {
            "CapacityProvider": "FARGATE",
            "Base": 0,
            "Weight": 1
          }
        ],
        "TaskDefinition": { "Ref": "WebTaskDefinition" },
        "ServiceName": "ecos-web-service",
        "SchedulingStrategy": "REPLICA",
        "DesiredCount": 1,
        "NetworkConfiguration": {
          "AwsvpcConfiguration": {
            "AssignPublicIp": "ENABLED",
            "SecurityGroups": [ 
              { "Ref": "DefaultSecurityGroup" }
            ],
            "Subnets": [
			  { "Ref": "SubnetA" },
              { "Ref": "SubnetB" },
              { "Ref": "SubnetC" },
              { "Ref": "SubnetD" },
              { "Ref": "SubnetE" },
              { "Ref": "SubnetF" }
            ]
          }
        },
        "PlatformVersion": "LATEST",
        "DeploymentConfiguration": {
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 100,
          "DeploymentCircuitBreaker": {
            "Enable": true,
            "Rollback": true
          }
        },
        "DeploymentController": {
          "Type": "ECS"
        },
        "ServiceConnectConfiguration": {
          "Enabled": false
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "ecos-web-service"
          },
          {
            "Key": "Environment",
            "Value": "dev"
          }
        ],
        "EnableECSManagedTags": true
      }
    }
  },
  "Outputs": {
    "ApiECSCluster": {
      "Description": "The created API cluster.",
      "Value": {
        "Ref": "ApiECSCluster"
      }
    },
    "WebECSCluster": {
      "Description": "The created UI cluster.",
      "Value": {
        "Ref": "WebECSCluster"
      }
    },
    "ApiECSService": {
      "Description": "The created API service.",
      "Value": {
        "Ref": "ApiECSService"
      }
    },
    "WebECSService": {
      "Description": "The created UI service.",
      "Value": {
        "Ref": "WebECSService"
      }
    }
  }
}